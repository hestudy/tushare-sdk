name: Publish to npm

on:
  push:
    tags:
      - 'v*'  # 匹配所有以 v 开头的标签

# 并发控制：同一标签排队执行，不同标签并行
concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

# 权限声明
permissions:
  contents: write    # 创建 GitHub Release
  id-token: write    # npm provenance

jobs:
  # Job 1: Test & Build
  # 目的：确保代码质量，只有通过所有测试的代码才能发布
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Lint
        run: pnpm lint
      
      - name: Type check
        run: pnpm type-check
      
      - name: Build
        run: pnpm build
      
      - name: Test with coverage
        run: pnpm test:coverage
        env:
          TUSHARE_TOKEN: ${{ secrets.TUSHARE_TOKEN }}
      
      - name: Verify build artifacts
        run: |
          echo "::group::Verify build artifacts"
          cd packages/tushare-sdk
          if [ ! -d "dist" ]; then
            echo "::error::Build artifacts missing: dist/ directory not found"
            exit 1
          fi
          ls -lh dist/
          echo "::endgroup::"

  # Job 2: Publish to npm
  # 目的：将包发布到 npm，自动推断 dist-tag
  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: test-and-build
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build
        run: pnpm build
      
      - name: Extract version from tag
        id: version
        run: |
          TAG_VERSION=${GITHUB_REF_NAME#v}
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "::notice::Extracted version: $TAG_VERSION"
      
      - name: Sync version to package.json
        run: |
          echo "::group::Sync version from tag"
          TAG_VERSION=${{ steps.version.outputs.version }}
          cd packages/tushare-sdk
          npm version $TAG_VERSION --no-git-tag-version --allow-same-version
          echo "::endgroup::"
      
      - name: Verify version consistency
        run: |
          TAG_VERSION=${{ steps.version.outputs.version }}
          PKG_VERSION=$(node -p "require('./packages/tushare-sdk/package.json').version")
          echo "Tag version: $TAG_VERSION"
          echo "Package version: $PKG_VERSION"
          if [ "$TAG_VERSION" != "$PKG_VERSION" ]; then
            echo "::error::Version mismatch: tag=$TAG_VERSION, package=$PKG_VERSION"
            exit 1
          fi
          echo "::notice::Version consistency verified: $TAG_VERSION"
      
      - name: Infer dist-tag
        id: dist-tag
        run: |
          TAG_VERSION=${{ steps.version.outputs.version }}
          
          # 推断 dist-tag
          if [[ $TAG_VERSION =~ - ]]; then
            # 预发布版本：提取标识符（alpha, beta, rc, next）
            PRERELEASE_TAG=$(echo $TAG_VERSION | sed -E 's/.*-([a-z]+).*/\1/')
            DIST_TAG=$PRERELEASE_TAG
          else
            # 稳定版本
            DIST_TAG="latest"
          fi
          
          echo "dist_tag=$DIST_TAG" >> $GITHUB_OUTPUT
          echo "::notice::Inferred dist-tag: $DIST_TAG"
      
      - name: Check version conflict
        run: |
          TAG_VERSION=${{ steps.version.outputs.version }}
          if npm view @hestudy/tushare-sdk@$TAG_VERSION version 2>/dev/null; then
            echo "::error::Version $TAG_VERSION already exists on npm. Please use a new version number."
            exit 1
          fi
          echo "::notice::Version $TAG_VERSION is available"
      
      - name: Publish to npm
        run: |
          cd packages/tushare-sdk
          DIST_TAG=${{ steps.dist-tag.outputs.dist_tag }}
          echo "::group::Publishing to npm with tag: $DIST_TAG"
          pnpm publish --tag $DIST_TAG --no-git-checks --access public
          echo "::endgroup::"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTOMATION_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
      
      - name: Verify publication
        run: |
          TAG_VERSION=${{ steps.version.outputs.version }}
          echo "::group::Verify npm publication"
          sleep 5  # 等待 npm 索引更新
          PUBLISHED_VERSION=$(npm view @hestudy/tushare-sdk@$TAG_VERSION version 2>/dev/null || echo "")
          if [ "$PUBLISHED_VERSION" = "$TAG_VERSION" ]; then
            echo "::notice::✅ Published @hestudy/tushare-sdk@$TAG_VERSION with tag '${{ steps.dist-tag.outputs.dist_tag }}'"
            echo "::notice::📦 npm: https://www.npmjs.com/package/@hestudy/tushare-sdk/v/$TAG_VERSION"
          else
            echo "::warning::Publication verification failed, but this may be due to npm indexing delay"
          fi
          echo "::endgroup::"

  # Job 3: Create GitHub Release
  # 目的：创建 GitHub Release 并生成变更日志
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    timeout-minutes: 3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以生成变更日志
      
      - name: Get previous tag
        id: previous-tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "::notice::Previous tag: $PREVIOUS_TAG"
          else
            echo "::notice::No previous tag found (first release)"
          fi
      
      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=${{ steps.previous-tag.outputs.previous_tag }}
          
          # 生成变更日志
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            # 提取自上次发布以来的 commits
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> changelog.md
            echo "" >> changelog.md
            echo "" >> changelog.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ github.ref_name }}" >> changelog.md
          else
            # 首次发布
            git log --pretty=format:"- %s (%h)" --no-merges >> changelog.md
            echo "" >> changelog.md
            echo "" >> changelog.md
            echo "**First Release** 🎉" >> changelog.md
          fi
          
          # 输出变更日志内容
          echo "::group::Generated Changelog"
          cat changelog.md
          echo "::endgroup::"
          
          # 将变更日志保存为输出（处理多行）
          {
            echo 'content<<EOF'
            cat changelog.md
            echo EOF
          } >> $GITHUB_OUTPUT
      
      - name: Determine if prerelease
        id: prerelease
        run: |
          if [[ ${{ github.ref_name }} =~ - ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "::notice::This is a prerelease version"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "::notice::This is a stable release"
          fi
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.content }}
          draft: false
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
      
      - name: Report success
        run: |
          echo "::notice::🎉 Release ${{ github.ref_name }} created successfully"
          echo "::notice::📋 Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
